// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package http

import (
	"github.com/jkmolczan/srv-search/pkg/numbers"
	"sync"
)

// Ensure, that indexSearcherMock does implement indexSearcher.
// If this is not the case, regenerate this file with moq.
var _ indexSearcher = &indexSearcherMock{}

// indexSearcherMock is a mock implementation of indexSearcher.
//
//	func TestSomethingThatUsesindexSearcher(t *testing.T) {
//
//		// make and configure a mocked indexSearcher
//		mockedindexSearcher := &indexSearcherMock{
//			SearchIndexFunc: func(value int, approximation float64) (numbers.SearchResult, error) {
//				panic("mock out the SearchIndex method")
//			},
//		}
//
//		// use mockedindexSearcher in code that requires indexSearcher
//		// and then make assertions.
//
//	}
type indexSearcherMock struct {
	// SearchIndexFunc mocks the SearchIndex method.
	SearchIndexFunc func(value int, approximation float64) (numbers.SearchResult, error)

	// calls tracks calls to the methods.
	calls struct {
		// SearchIndex holds details about calls to the SearchIndex method.
		SearchIndex []struct {
			// Value is the value argument value.
			Value int
			// Approximation is the approximation argument value.
			Approximation float64
		}
	}
	lockSearchIndex sync.RWMutex
}

// SearchIndex calls SearchIndexFunc.
func (mock *indexSearcherMock) SearchIndex(value int, approximation float64) (numbers.SearchResult, error) {
	if mock.SearchIndexFunc == nil {
		panic("indexSearcherMock.SearchIndexFunc: method is nil but indexSearcher.SearchIndex was just called")
	}
	callInfo := struct {
		Value         int
		Approximation float64
	}{
		Value:         value,
		Approximation: approximation,
	}
	mock.lockSearchIndex.Lock()
	mock.calls.SearchIndex = append(mock.calls.SearchIndex, callInfo)
	mock.lockSearchIndex.Unlock()
	return mock.SearchIndexFunc(value, approximation)
}

// SearchIndexCalls gets all the calls that were made to SearchIndex.
// Check the length with:
//
//	len(mockedindexSearcher.SearchIndexCalls())
func (mock *indexSearcherMock) SearchIndexCalls() []struct {
	Value         int
	Approximation float64
} {
	var calls []struct {
		Value         int
		Approximation float64
	}
	mock.lockSearchIndex.RLock()
	calls = mock.calls.SearchIndex
	mock.lockSearchIndex.RUnlock()
	return calls
}
