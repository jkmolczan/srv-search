// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package numbers

import (
	"sync"
)

// Ensure, that numbersStorageMock does implement numbersStorage.
// If this is not the case, regenerate this file with moq.
var _ numbersStorage = &numbersStorageMock{}

// numbersStorageMock is a mock implementation of numbersStorage.
//
//	func TestSomethingThatUsesnumbersStorage(t *testing.T) {
//
//		// make and configure a mocked numbersStorage
//		mockednumbersStorage := &numbersStorageMock{
//			GetSortedCollectionFunc: func() ([]int, error) {
//				panic("mock out the GetSortedCollection method")
//			},
//		}
//
//		// use mockednumbersStorage in code that requires numbersStorage
//		// and then make assertions.
//
//	}
type numbersStorageMock struct {
	// GetSortedCollectionFunc mocks the GetSortedCollection method.
	GetSortedCollectionFunc func() ([]int, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetSortedCollection holds details about calls to the GetSortedCollection method.
		GetSortedCollection []struct {
		}
	}
	lockGetSortedCollection sync.RWMutex
}

// GetSortedCollection calls GetSortedCollectionFunc.
func (mock *numbersStorageMock) GetSortedCollection() ([]int, error) {
	if mock.GetSortedCollectionFunc == nil {
		panic("numbersStorageMock.GetSortedCollectionFunc: method is nil but numbersStorage.GetSortedCollection was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetSortedCollection.Lock()
	mock.calls.GetSortedCollection = append(mock.calls.GetSortedCollection, callInfo)
	mock.lockGetSortedCollection.Unlock()
	return mock.GetSortedCollectionFunc()
}

// GetSortedCollectionCalls gets all the calls that were made to GetSortedCollection.
// Check the length with:
//
//	len(mockednumbersStorage.GetSortedCollectionCalls())
func (mock *numbersStorageMock) GetSortedCollectionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetSortedCollection.RLock()
	calls = mock.calls.GetSortedCollection
	mock.lockGetSortedCollection.RUnlock()
	return calls
}
